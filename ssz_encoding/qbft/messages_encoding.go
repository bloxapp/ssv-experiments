// Code generated by fastssz. DO NOT EDIT.
// Hash: 9e9a1dafccc054c73577302c50a35c50030fdd802e95c33c20777b2edee0bb5e
// Version: 0.1.2
package qbft

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Message object
func (m *Message) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Message object to a target array
func (m *Message) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(76)

	// Field (0) 'MsgType'
	dst = ssz.MarshalUint32(dst, m.MsgType)

	// Field (1) 'Height'
	dst = ssz.MarshalUint64(dst, m.Height)

	// Field (2) 'Round'
	dst = ssz.MarshalUint64(dst, m.Round)

	// Field (3) 'Identifier'
	dst = append(dst, m.Identifier[:]...)

	// Offset (4) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Data)

	// Field (4) 'Data'
	if size := len(m.Data); size > 2048 {
		err = ssz.ErrBytesLengthFn("Message.Data", size, 2048)
		return
	}
	dst = append(dst, m.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the Message object
func (m *Message) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 76 {
		return ssz.ErrSize
	}

	tail := buf
	var o4 uint64

	// Field (0) 'MsgType'
	m.MsgType = ssz.UnmarshallUint32(buf[0:4])

	// Field (1) 'Height'
	m.Height = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'Round'
	m.Round = ssz.UnmarshallUint64(buf[12:20])

	// Field (3) 'Identifier'
	copy(m.Identifier[:], buf[20:72])

	// Offset (4) 'Data'
	if o4 = ssz.ReadOffset(buf[72:76]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 < 76 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (4) 'Data'
	{
		buf = tail[o4:]
		if len(buf) > 2048 {
			return ssz.ErrBytesLength
		}
		if cap(m.Data) == 0 {
			m.Data = make([]byte, 0, len(buf))
		}
		m.Data = append(m.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Message object
func (m *Message) SizeSSZ() (size int) {
	size = 76

	// Field (4) 'Data'
	size += len(m.Data)

	return
}

// HashTreeRoot ssz hashes the Message object
func (m *Message) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Message object with a hasher
func (m *Message) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgType'
	hh.PutUint32(m.MsgType)

	// Field (1) 'Height'
	hh.PutUint64(m.Height)

	// Field (2) 'Round'
	hh.PutUint64(m.Round)

	// Field (3) 'Identifier'
	hh.PutBytes(m.Identifier[:])

	// Field (4) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Data))
		if byteLen > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(m.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (2048+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Message object
func (m *Message) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}

// MarshalSSZ ssz marshals the SignedMessage object
func (s *SignedMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedMessage object to a target array
func (s *SignedMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(104)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.Message.SizeSSZ()

	// Offset (1) 'Signers'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signers) * 8

	// Field (2) 'Signature'
	dst = append(dst, s.Signature[:]...)

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Signers'
	if size := len(s.Signers); size > 13 {
		err = ssz.ErrListTooBigFn("SignedMessage.Signers", size, 13)
		return
	}
	for ii := 0; ii < len(s.Signers); ii++ {
		dst = ssz.MarshalUint64(dst, s.Signers[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedMessage object
func (s *SignedMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 104 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 104 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Signers'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'Signature'
	copy(s.Signature[:], buf[8:104])

	// Field (0) 'Message'
	{
		buf = tail[o0:o1]
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'Signers'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		s.Signers = ssz.ExtendUint64(s.Signers, num)
		for ii := 0; ii < num; ii++ {
			s.Signers[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedMessage object
func (s *SignedMessage) SizeSSZ() (size int) {
	size = 104

	// Field (0) 'Message'
	size += s.Message.SizeSSZ()

	// Field (1) 'Signers'
	size += len(s.Signers) * 8

	return
}

// HashTreeRoot ssz hashes the SignedMessage object
func (s *SignedMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedMessage object with a hasher
func (s *SignedMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signers'
	{
		if size := len(s.Signers); size > 13 {
			err = ssz.ErrListTooBigFn("SignedMessage.Signers", size, 13)
			return
		}
		subIndx := hh.Index()
		for _, i := range s.Signers {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.Signers))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	// Field (2) 'Signature'
	hh.PutBytes(s.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedMessage object
func (s *SignedMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
