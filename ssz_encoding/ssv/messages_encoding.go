// Code generated by fastssz. DO NOT EDIT.
// Hash: 9956b848ba02e3ac92aba5702e5837c357c7a559bf8a10132b7761faa0d6219b
// Version: 0.1.2
package ssv

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PartialSignature object
func (p *PartialSignature) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PartialSignature object to a target array
func (p *PartialSignature) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Signature'
	dst = append(dst, p.Signature[:]...)

	// Field (1) 'SigningRoot'
	dst = append(dst, p.SigningRoot[:]...)

	// Field (2) 'Signer'
	dst = ssz.MarshalUint64(dst, p.Signer)

	return
}

// UnmarshalSSZ ssz unmarshals the PartialSignature object
func (p *PartialSignature) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 136 {
		return ssz.ErrSize
	}

	// Field (0) 'Signature'
	copy(p.Signature[:], buf[0:96])

	// Field (1) 'SigningRoot'
	copy(p.SigningRoot[:], buf[96:128])

	// Field (2) 'Signer'
	p.Signer = ssz.UnmarshallUint64(buf[128:136])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PartialSignature object
func (p *PartialSignature) SizeSSZ() (size int) {
	size = 136
	return
}

// HashTreeRoot ssz hashes the PartialSignature object
func (p *PartialSignature) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PartialSignature object with a hasher
func (p *PartialSignature) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Signature'
	hh.PutBytes(p.Signature[:])

	// Field (1) 'SigningRoot'
	hh.PutBytes(p.SigningRoot[:])

	// Field (2) 'Signer'
	hh.PutUint64(p.Signer)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PartialSignature object
func (p *PartialSignature) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the PartialSignatures object
func (p *PartialSignatures) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PartialSignatures object to a target array
func (p *PartialSignatures) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Field (0) 'Type'
	dst = ssz.MarshalUint64(dst, p.Type)

	// Offset (1) 'Messages'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.Messages) * 136

	// Field (1) 'Messages'
	if size := len(p.Messages); size > 13 {
		err = ssz.ErrListTooBigFn("PartialSignatures.Messages", size, 13)
		return
	}
	for ii := 0; ii < len(p.Messages); ii++ {
		if dst, err = p.Messages[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the PartialSignatures object
func (p *PartialSignatures) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Type'
	p.Type = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'Messages'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Messages'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 136, 13)
		if err != nil {
			return err
		}
		p.Messages = make([]*PartialSignature, num)
		for ii := 0; ii < num; ii++ {
			if p.Messages[ii] == nil {
				p.Messages[ii] = new(PartialSignature)
			}
			if err = p.Messages[ii].UnmarshalSSZ(buf[ii*136 : (ii+1)*136]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PartialSignatures object
func (p *PartialSignatures) SizeSSZ() (size int) {
	size = 12

	// Field (1) 'Messages'
	size += len(p.Messages) * 136

	return
}

// HashTreeRoot ssz hashes the PartialSignatures object
func (p *PartialSignatures) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PartialSignatures object with a hasher
func (p *PartialSignatures) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Type'
	hh.PutUint64(p.Type)

	// Field (1) 'Messages'
	{
		subIndx := hh.Index()
		num := uint64(len(p.Messages))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range p.Messages {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PartialSignatures object
func (p *PartialSignatures) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the SignedPartialSignatures object
func (s *SignedPartialSignatures) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedPartialSignatures object to a target array
func (s *SignedPartialSignatures) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(108)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.Message.SizeSSZ()

	// Field (1) 'Signature'
	dst = append(dst, s.Signature[:]...)

	// Field (2) 'Signer'
	dst = ssz.MarshalUint64(dst, s.Signer)

	// Field (0) 'Message'
	if dst, err = s.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedPartialSignatures object
func (s *SignedPartialSignatures) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 108 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 108 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signature'
	copy(s.Signature[:], buf[4:100])

	// Field (2) 'Signer'
	s.Signer = ssz.UnmarshallUint64(buf[100:108])

	// Field (0) 'Message'
	{
		buf = tail[o0:]
		if err = s.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedPartialSignatures object
func (s *SignedPartialSignatures) SizeSSZ() (size int) {
	size = 108

	// Field (0) 'Message'
	size += s.Message.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedPartialSignatures object
func (s *SignedPartialSignatures) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedPartialSignatures object with a hasher
func (s *SignedPartialSignatures) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = s.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signature'
	hh.PutBytes(s.Signature[:])

	// Field (2) 'Signer'
	hh.PutUint64(s.Signer)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedPartialSignatures object
func (s *SignedPartialSignatures) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
